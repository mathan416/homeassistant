esphome:
  name: "esphome-web-toronto-arrivals"
  friendly_name: Toronto_Airport_Arrivals

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable Home Assistant API
api:
  encryption:
    key: !secret esphome_encryption_key

logger:
  level: INFO
  
ota:
  - platform: esphome
    password: !secret esphome_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "AirportArrivals Fallback Hotspot"
    password: !secret wifi_fallback

# Enable captive portal for easier wifi setup
captive_portal:

# ============================================================
# Globals for airport management and display optimization
# ============================================================
globals:
  - id: current_airport
    type: int
    initial_value: '0'
  - id: last_update_time
    type: unsigned long
    initial_value: '0'
  - id: update_counter
    type: int
    initial_value: '0'
  - id: last_touch_time
    type: unsigned long
    initial_value: '0'

# ============================================================
# Template sensors for cleaner code organization
# ============================================================
sensor:
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_strength
    update_interval: 60s
    internal: true

  - platform: uptime
    name: "Uptime"
    id: device_uptime
    update_interval: 60s
    internal: true

  - platform: internal_temperature
    name: "ESP32 Temperature"
    id: esp_temperature
    update_interval: 60s

# ============================================================
# Flight Data Sensors - Organized by airport
# ============================================================
text_sensor:
  # System sensors
  - platform: template
    name: "Current Airport"
    id: current_airport_name
    lambda: |-
      if (id(current_airport) == 0) return {"YYZ - Toronto Pearson"};
      else return {"YTZ - Billy Bishop"};
    update_interval: 5s
    internal: true

  # Toronto Pearson (YYZ) flight data
  - platform: homeassistant
    id: pearson_flight_1_time
    entity_id: sensor.pearson_flight_1_time
    internal: true
    on_value:
      - if:
          condition:
            lambda: 'return millis() - id(last_update_time) > 1000;'  # Rate limit updates
          then:
            - lambda: 'id(last_update_time) = millis();'
            - component.update: my_display
  
  - platform: homeassistant
    id: pearson_flight_1_airline
    entity_id: sensor.pearson_flight_1_airline
    internal: true

  - platform: homeassistant
    id: pearson_flight_1_flight_number
    entity_id: sensor.pearson_flight_1_flight_number
    internal: true

  - platform: homeassistant
    id: pearson_flight_1_origin
    entity_id: sensor.pearson_flight_1_origin
    internal: true

  - platform: homeassistant
    id: pearson_flight_1_gate
    entity_id: sensor.pearson_flight_1_gate
    internal: true

  - platform: homeassistant
    id: pearson_flight_1_status
    entity_id: sensor.pearson_flight_1_status
    internal: true

  # Flight 2-5 for Pearson (condensed for space)
  - platform: homeassistant
    id: pearson_flight_2_time
    entity_id: sensor.pearson_flight_2_time
    internal: true
  - platform: homeassistant
    id: pearson_flight_2_airline
    entity_id: sensor.pearson_flight_2_airline
    internal: true
  - platform: homeassistant
    id: pearson_flight_2_flight_number
    entity_id: sensor.pearson_flight_2_flight_number
    internal: true
  - platform: homeassistant
    id: pearson_flight_2_origin
    entity_id: sensor.pearson_flight_2_origin
    internal: true
  - platform: homeassistant
    id: pearson_flight_2_gate
    entity_id: sensor.pearson_flight_2_gate
    internal: true
  - platform: homeassistant
    id: pearson_flight_2_status
    entity_id: sensor.pearson_flight_2_status
    internal: true

  - platform: homeassistant
    id: pearson_flight_3_time
    entity_id: sensor.pearson_flight_3_time
    internal: true
  - platform: homeassistant
    id: pearson_flight_3_airline
    entity_id: sensor.pearson_flight_3_airline
    internal: true
  - platform: homeassistant
    id: pearson_flight_3_flight_number
    entity_id: sensor.pearson_flight_3_flight_number
    internal: true
  - platform: homeassistant
    id: pearson_flight_3_origin
    entity_id: sensor.pearson_flight_3_origin
    internal: true
  - platform: homeassistant
    id: pearson_flight_3_gate
    entity_id: sensor.pearson_flight_3_gate
    internal: true
  - platform: homeassistant
    id: pearson_flight_3_status
    entity_id: sensor.pearson_flight_3_status
    internal: true

  - platform: homeassistant
    id: pearson_flight_4_time
    entity_id: sensor.pearson_flight_4_time
    internal: true
  - platform: homeassistant
    id: pearson_flight_4_airline
    entity_id: sensor.pearson_flight_4_airline
    internal: true
  - platform: homeassistant
    id: pearson_flight_4_flight_number
    entity_id: sensor.pearson_flight_4_flight_number
    internal: true
  - platform: homeassistant
    id: pearson_flight_4_origin
    entity_id: sensor.pearson_flight_4_origin
    internal: true
  - platform: homeassistant
    id: pearson_flight_4_gate
    entity_id: sensor.pearson_flight_4_gate
    internal: true
  - platform: homeassistant
    id: pearson_flight_4_status
    entity_id: sensor.pearson_flight_4_status
    internal: true

  - platform: homeassistant
    id: pearson_flight_5_time
    entity_id: sensor.pearson_flight_5_time
    internal: true
  - platform: homeassistant
    id: pearson_flight_5_airline
    entity_id: sensor.pearson_flight_5_airline
    internal: true
  - platform: homeassistant
    id: pearson_flight_5_flight_number
    entity_id: sensor.pearson_flight_5_flight_number
    internal: true
  - platform: homeassistant
    id: pearson_flight_5_origin
    entity_id: sensor.pearson_flight_5_origin
    internal: true
  - platform: homeassistant
    id: pearson_flight_5_gate
    entity_id: sensor.pearson_flight_5_gate
    internal: true
  - platform: homeassistant
    id: pearson_flight_5_status
    entity_id: sensor.pearson_flight_5_status
    internal: true
    
  # Billy Bishop (YTZ) flight data
  - platform: homeassistant
    id: billy_bishop_flight_1_time
    entity_id: sensor.billy_bishop_flight_1_time
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_1_airline
    entity_id: sensor.billy_bishop_flight_1_airline
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_1_flight_number
    entity_id: sensor.billy_bishop_flight_1_flight_number
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_1_origin
    entity_id: sensor.billy_bishop_flight_1_origin
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_1_gate
    entity_id: sensor.billy_bishop_flight_1_gate
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_1_status
    entity_id: sensor.billy_bishop_flight_1_status
    internal: true

  # Flights 2-5 for Billy Bishop (condensed)
  - platform: homeassistant
    id: billy_bishop_flight_2_time
    entity_id: sensor.billy_bishop_flight_2_time
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_2_airline
    entity_id: sensor.billy_bishop_flight_2_airline
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_2_flight_number
    entity_id: sensor.billy_bishop_flight_2_flight_number
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_2_origin
    entity_id: sensor.billy_bishop_flight_2_origin
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_2_gate
    entity_id: sensor.billy_bishop_flight_2_gate
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_2_status
    entity_id: sensor.billy_bishop_flight_2_status
    internal: true

  - platform: homeassistant
    id: billy_bishop_flight_3_time
    entity_id: sensor.billy_bishop_flight_3_time
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_3_airline
    entity_id: sensor.billy_bishop_flight_3_airline
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_3_flight_number
    entity_id: sensor.billy_bishop_flight_3_flight_number
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_3_origin
    entity_id: sensor.billy_bishop_flight_3_origin
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_3_gate
    entity_id: sensor.billy_bishop_flight_3_gate
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_3_status
    entity_id: sensor.billy_bishop_flight_3_status
    internal: true

  - platform: homeassistant
    id: billy_bishop_flight_4_time
    entity_id: sensor.billy_bishop_flight_4_time
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_4_airline
    entity_id: sensor.billy_bishop_flight_4_airline
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_4_flight_number
    entity_id: sensor.billy_bishop_flight_4_flight_number
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_4_origin
    entity_id: sensor.billy_bishop_flight_4_origin
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_4_gate
    entity_id: sensor.billy_bishop_flight_4_gate
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_4_status
    entity_id: sensor.billy_bishop_flight_4_status
    internal: true

  - platform: homeassistant
    id: billy_bishop_flight_5_time
    entity_id: sensor.billy_bishop_flight_5_time
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_5_airline
    entity_id: sensor.billy_bishop_flight_5_airline
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_5_flight_number
    entity_id: sensor.billy_bishop_flight_5_flight_number
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_5_origin
    entity_id: sensor.billy_bishop_flight_5_origin
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_5_gate
    entity_id: sensor.billy_bishop_flight_5_gate
    internal: true
  - platform: homeassistant
    id: billy_bishop_flight_5_status
    entity_id: sensor.billy_bishop_flight_5_status
    internal: true

# ============================================================
# Enhanced Fonts with better readability
# ============================================================
font:
  - file: 'gfonts://Roboto'
    id: header_font
    size: 12
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°"
  - file: 'gfonts://Roboto Mono'
    id: time_font
    size: 10
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  - file: 'gfonts://Roboto'
    id: flight_font
    size: 9
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
  - file: 'gfonts://Roboto'
    id: small_font
    size: 8
    glyphs: " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"

# ============================================================
# Enhanced Color Scheme
# ============================================================
color:
  - id: canada_red
    hex: "FF0000"
  - id: canada_white
    hex: "FFFFFF"
  - id: canada_black
    hex: "000000"
  - id: airport_blue
    hex: "004C9F"
  - id: status_green
    hex: "00A650"
  - id: status_amber
    hex: "FF8C00"
  - id: status_red
    hex: "E60000"
  - id: background_dark
    hex: "1A1A1A"
  - id: background_light
    hex: "F5F5F5"
  - id: text_gray
    hex: "888888"
  - id: header_blue
    hex: "003F7F"

# ============================================================
# Hardware Setup with PWM backlight control
# ============================================================
light:
  - platform: monochromatic
    output: backlight_pwm
    name: Display Backlight
    id: backlight
    restore_mode: ALWAYS_ON
    effects:
      - pulse:
          name: "Pulse"
          transition_length: 2s
          update_interval: 2s

time:
  - platform: homeassistant
    id: esptime
    timezone: "America/Toronto"

spi:
  - id: tft
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: touch
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39

output:
  - platform: ledc
    pin: GPIO21
    id: backlight_pwm
    frequency: 1000Hz

# ============================================================
# Main Display with enhanced rendering
# ============================================================
display:
  - platform: ili9xxx
    model: ILI9341
    id: my_display
    spi_id: tft
    cs_pin: GPIO15
    dc_pin: GPIO2
    auto_clear_enabled: true
    invert_colors: false
    color_palette: 8BIT
    rotation: 0
    dimensions: 
      width: 320
      height: 240
    update_interval: 10s  # Reduced for better responsiveness
    lambda: |-
      // Increment update counter for animations
      id(update_counter) = (id(update_counter) + 1) % 60;
      
      // Helper function to clean and truncate text
      auto clean_text = [](std::string text, size_t max_len = 50) -> std::string {
        std::string result;
        for (char c : text) {
          if (c >= 32 && c <= 126) {
            result += c;
          } else {
            result += '?';
          }
        }
        if (result.length() > max_len) {
          result = result.substr(0, max_len - 2) + "..";
        }
        return result;
      };
      
      // Enhanced status color function with more states
      auto get_status_color = [](const std::string& status) -> Color {
        std::string lower_status = status;
        std::transform(lower_status.begin(), lower_status.end(), lower_status.begin(), ::tolower);
        
        if (lower_status.find("on time") != std::string::npos || 
            lower_status.find("arrived") != std::string::npos ||
            lower_status.find("boarding") != std::string::npos) return id(status_green);
        if (lower_status.find("delayed") != std::string::npos || 
            lower_status.find("late") != std::string::npos) return id(status_amber);
        if (lower_status.find("cancelled") != std::string::npos || 
            lower_status.find("diverted") != std::string::npos) return id(status_red);
        return id(canada_white);
      };
      
      // Helper function to display flight row with better formatting
      auto display_flight = [&](int row, const std::string& time, const std::string& flight, 
                               const std::string& origin, const std::string& gate, const std::string& status) {
        std::string display_flight = clean_text(flight, 8);
        std::string display_origin = clean_text(origin, 12);
        std::string display_status = clean_text(status, 10);
        std::string display_gate = gate == "-" || gate == "Unknown" || gate.empty() ? "--" : clean_text(gate, 4);
        
        int y_pos = 70 + row * 28;  // Increased row spacing
        
        // Time column (fixed width)
        it.printf(8, y_pos, id(time_font), id(canada_white), "%-5s", time.c_str());
        
        // Flight number (with airline code highlighting)
        it.printf(60, y_pos, id(flight_font), id(canada_white), "%-8s", display_flight.c_str());
        
        // Origin (truncated if needed)
        it.printf(115, y_pos, id(flight_font), id(canada_white), "%-12s", display_origin.c_str());
        
        // Gate
        it.printf(200, y_pos, id(flight_font), id(canada_white), "%-4s", display_gate.c_str());
        
        // Status with color coding
        it.printf(230, y_pos, id(flight_font), get_status_color(display_status), "%-10s", display_status.c_str());
      };
      
      // Clear with gradient background
      it.fill(id(background_dark));
      
      // Enhanced header with gradient effect
      it.filled_rectangle(0, 0, 320, 30, id(header_blue));
      it.filled_rectangle(0, 28, 320, 2, id(canada_red));
      
      // Current time with timezone
      auto now = id(esptime).now();
      it.strftime(8, 6, id(header_font), id(canada_white), TextAlign::TOP_LEFT, "%H:%M", now);
      it.strftime(8, 18, id(small_font), id(text_gray), TextAlign::TOP_LEFT, "%a %d/%m", now);
      
      // Airport name with enhanced styling
      std::string airport_name;
      std::string airport_full;
      if (id(current_airport) == 0) {
        airport_name = "YYZ";
        airport_full = "Toronto Pearson";
      } else {
        airport_name = "YTZ";
        airport_full = "Billy Bishop";
      }
      
      it.printf(160, 6, id(header_font), id(canada_white), TextAlign::TOP_CENTER, "%s ARRIVALS", airport_name.c_str());
      it.printf(160, 18, id(small_font), id(text_gray), TextAlign::TOP_CENTER, "%s", airport_full.c_str());
      
      // Live data indicator with animation
      bool has_live_data = false;
      if (id(current_airport) == 0) { // Pearson
        has_live_data = (id(pearson_flight_1_time).has_state() && id(pearson_flight_1_time).state != "--:--" && !id(pearson_flight_1_time).state.empty()) || 
                       (id(pearson_flight_2_time).has_state() && id(pearson_flight_2_time).state != "--:--" && !id(pearson_flight_2_time).state.empty());
      } else { // Billy Bishop
        has_live_data = (id(billy_bishop_flight_1_time).has_state() && id(billy_bishop_flight_1_time).state != "--:--" && !id(billy_bishop_flight_1_time).state.empty()) || 
                       (id(billy_bishop_flight_2_time).has_state() && id(billy_bishop_flight_2_time).state != "--:--" && !id(billy_bishop_flight_2_time).state.empty());
      }
      
      // Animated live indicator
      if (has_live_data) {
        int pulse = (id(update_counter) % 30 < 15) ? 255 : 180;  // Pulsing effect
        it.filled_circle(298, 15, 8, Color(0, pulse, 0));
        it.printf(275, 6, id(small_font), id(canada_white), TextAlign::TOP_RIGHT, "LIVE");
      } else {
        it.filled_circle(298, 15, 8, Color(255, 165, 0));
        it.printf(275, 6, id(small_font), id(canada_white), TextAlign::TOP_RIGHT, "DEMO");
      }
      
      // Enhanced column headers with better spacing
      int header_y = 40;
      it.filled_rectangle(0, header_y, 320, 22, id(background_light));
      it.line(0, header_y + 21, 320, header_y + 21, id(text_gray));
      
      it.printf(8, header_y + 4, id(header_font), id(canada_black), "TIME");
      it.printf(60, header_y + 4, id(header_font), id(canada_black), "FLIGHT");
      it.printf(115, header_y + 4, id(header_font), id(canada_black), "FROM");
      it.printf(200, header_y + 4, id(header_font), id(canada_black), "GATE");
      it.printf(230, header_y + 4, id(header_font), id(canada_black), "STATUS");
      
      // Display flight data with fallback demo data
      if (id(current_airport) == 0) { // Toronto Pearson (YYZ)
        // Flight 1
        std::string time1 = (id(pearson_flight_1_time).has_state() && !id(pearson_flight_1_time).state.empty() && id(pearson_flight_1_time).state != "--:--") ? 
                           id(pearson_flight_1_time).state : "14:25";
        std::string flight1 = (id(pearson_flight_1_flight_number).has_state() && !id(pearson_flight_1_flight_number).state.empty() && id(pearson_flight_1_flight_number).state != "Unknown") ? 
                             id(pearson_flight_1_flight_number).state : "AC123";
        std::string origin1 = (id(pearson_flight_1_origin).has_state() && !id(pearson_flight_1_origin).state.empty() && id(pearson_flight_1_origin).state != "Unknown") ? 
                             id(pearson_flight_1_origin).state : "Vancouver";
        std::string gate1 = (id(pearson_flight_1_gate).has_state() && !id(pearson_flight_1_gate).state.empty() && id(pearson_flight_1_gate).state != "Unknown" && id(pearson_flight_1_gate).state != "-") ? 
                           id(pearson_flight_1_gate).state : "B12";
        std::string status1 = (id(pearson_flight_1_status).has_state() && !id(pearson_flight_1_status).state.empty() && id(pearson_flight_1_status).state != "Unknown") ? 
                             id(pearson_flight_1_status).state : "On Time";
        display_flight(0, time1, flight1, origin1, gate1, status1);
        
        // Flights 2-5 (similar pattern)
        std::string time2 = (id(pearson_flight_2_time).has_state() && !id(pearson_flight_2_time).state.empty() && id(pearson_flight_2_time).state != "--:--") ? 
                           id(pearson_flight_2_time).state : "14:50";
        std::string flight2 = (id(pearson_flight_2_flight_number).has_state() && !id(pearson_flight_2_flight_number).state.empty() && id(pearson_flight_2_flight_number).state != "Unknown") ? 
                             id(pearson_flight_2_flight_number).state : "WS456";
        std::string origin2 = (id(pearson_flight_2_origin).has_state() && !id(pearson_flight_2_origin).state.empty() && id(pearson_flight_2_origin).state != "Unknown") ? 
                             id(pearson_flight_2_origin).state : "Calgary";
        std::string gate2 = (id(pearson_flight_2_gate).has_state() && !id(pearson_flight_2_gate).state.empty() && id(pearson_flight_2_gate).state != "Unknown" && id(pearson_flight_2_gate).state != "-") ? 
                           id(pearson_flight_2_gate).state : "A25";
        std::string status2 = (id(pearson_flight_2_status).has_state() && !id(pearson_flight_2_status).state.empty() && id(pearson_flight_2_status).state != "Unknown") ? 
                             id(pearson_flight_2_status).state : "Delayed";
        display_flight(1, time2, flight2, origin2, gate2, status2);
        
        // Flight 3
        std::string time3 = (id(pearson_flight_3_time).has_state() && !id(pearson_flight_3_time).state.empty() && id(pearson_flight_3_time).state != "--:--") ? 
                           id(pearson_flight_3_time).state : "15:15";
        std::string flight3 = (id(pearson_flight_3_flight_number).has_state() && !id(pearson_flight_3_flight_number).state.empty() && id(pearson_flight_3_flight_number).state != "Unknown") ? 
                             id(pearson_flight_3_flight_number).state : "UA789";
        std::string origin3 = (id(pearson_flight_3_origin).has_state() && !id(pearson_flight_3_origin).state.empty() && id(pearson_flight_3_origin).state != "Unknown") ? 
                             id(pearson_flight_3_origin).state : "Chicago";
        std::string gate3 = (id(pearson_flight_3_gate).has_state() && !id(pearson_flight_3_gate).state.empty() && id(pearson_flight_3_gate).state != "Unknown" && id(pearson_flight_3_gate).state != "-") ? 
                           id(pearson_flight_3_gate).state : "D18";
        std::string status3 = (id(pearson_flight_3_status).has_state() && !id(pearson_flight_3_status).state.empty() && id(pearson_flight_3_status).state != "Unknown") ? 
                             id(pearson_flight_3_status).state : "Arrived";
        display_flight(2, time3, flight3, origin3, gate3, status3);
        
        // Flight 4
        std::string time4 = (id(pearson_flight_4_time).has_state() && !id(pearson_flight_4_time).state.empty() && id(pearson_flight_4_time).state != "--:--") ? 
                           id(pearson_flight_4_time).state : "15:40";
        std::string flight4 = (id(pearson_flight_4_flight_number).has_state() && !id(pearson_flight_4_flight_number).state.empty() && id(pearson_flight_4_flight_number).state != "Unknown") ? 
                             id(pearson_flight_4_flight_number).state : "LH321";
        std::string origin4 = (id(pearson_flight_4_origin).has_state() && !id(pearson_flight_4_origin).state.empty() && id(pearson_flight_4_origin).state != "Unknown") ? 
                             id(pearson_flight_4_origin).state : "Frankfurt";
        std::string gate4 = (id(pearson_flight_4_gate).has_state() && !id(pearson_flight_4_gate).state.empty() && id(pearson_flight_4_gate).state != "Unknown" && id(pearson_flight_4_gate).state != "-") ? 
                           id(pearson_flight_4_gate).state : "E32";
        std::string status4 = (id(pearson_flight_4_status).has_state() && !id(pearson_flight_4_status).state.empty() && id(pearson_flight_4_status).state != "Unknown") ? 
                             id(pearson_flight_4_status).state : "Boarding";
        display_flight(3, time4, flight4, origin4, gate4, status4);
        
        // Flight 5
        std::string time5 = (id(pearson_flight_5_time).has_state() && !id(pearson_flight_5_time).state.empty() && id(pearson_flight_5_time).state != "--:--") ? 
                           id(pearson_flight_5_time).state : "16:05";
        std::string flight5 = (id(pearson_flight_5_flight_number).has_state() && !id(pearson_flight_5_flight_number).state.empty() && id(pearson_flight_5_flight_number).state != "Unknown") ? 
                             id(pearson_flight_5_flight_number).state : "BA654";
        std::string origin5 = (id(pearson_flight_5_origin).has_state() && !id(pearson_flight_5_origin).state.empty() && id(pearson_flight_5_origin).state != "Unknown") ? 
                             id(pearson_flight_5_origin).state : "London";
        std::string gate5 = (id(pearson_flight_5_gate).has_state() && !id(pearson_flight_5_gate).state.empty() && id(pearson_flight_5_gate).state != "Unknown" && id(pearson_flight_5_gate).state != "-") ? 
                           id(pearson_flight_5_gate).state : "F14";
        std::string status5 = (id(pearson_flight_5_status).has_state() && !id(pearson_flight_5_status).state.empty() && id(pearson_flight_5_status).state != "Unknown") ? 
                             id(pearson_flight_5_status).state : "Cancelled";
        display_flight(4, time5, flight5, origin5, gate5, status5);
        
      } else { // Billy Bishop (YTZ)
        // Flight 1
        std::string time1 = (id(billy_bishop_flight_1_time).has_state() && !id(billy_bishop_flight_1_time).state.empty() && id(billy_bishop_flight_1_time).state != "--:--") ? 
                           id(billy_bishop_flight_1_time).state : "14:30";
        std::string flight1 = (id(billy_bishop_flight_1_flight_number).has_state() && !id(billy_bishop_flight_1_flight_number).state.empty() && id(billy_bishop_flight_1_flight_number).state != "Unknown") ? 
                             id(billy_bishop_flight_1_flight_number).state : "PD123";
        std::string origin1 = (id(billy_bishop_flight_1_origin).has_state() && !id(billy_bishop_flight_1_origin).state.empty() && id(billy_bishop_flight_1_origin).state != "Unknown") ? 
                             id(billy_bishop_flight_1_origin).state : "Montreal";
        std::string gate1 = (id(billy_bishop_flight_1_gate).has_state() && !id(billy_bishop_flight_1_gate).state.empty() && id(billy_bishop_flight_1_gate).state != "Unknown" && id(billy_bishop_flight_1_gate).state != "-") ? 
                           id(billy_bishop_flight_1_gate).state : "1";
        std::string status1 = (id(billy_bishop_flight_1_status).has_state() && !id(billy_bishop_flight_1_status).state.empty() && id(billy_bishop_flight_1_status).state != "Unknown") ? 
                             id(billy_bishop_flight_1_status).state : "On Time";
        display_flight(0, time1, flight1, origin1, gate1, status1);
        
        // Flight 2
        std::string time2 = (id(billy_bishop_flight_2_time).has_state() && !id(billy_bishop_flight_2_time).state.empty() && id(billy_bishop_flight_2_time).state != "--:--") ? 
                           id(billy_bishop_flight_2_time).state : "15:00";
        std::string flight2 = (id(billy_bishop_flight_2_flight_number).has_state() && !id(billy_bishop_flight_2_flight_number).state.empty() && id(billy_bishop_flight_2_flight_number).state != "Unknown") ? 
                             id(billy_bishop_flight_2_flight_number).state : "PD456";
        std::string origin2 = (id(billy_bishop_flight_2_origin).has_state() && !id(billy_bishop_flight_2_origin).state.empty() && id(billy_bishop_flight_2_origin).state != "Unknown") ? 
                             id(billy_bishop_flight_2_origin).state : "Ottawa";
        std::string gate2 = (id(billy_bishop_flight_2_gate).has_state() && !id(billy_bishop_flight_2_gate).state.empty() && id(billy_bishop_flight_2_gate).state != "Unknown" && id(billy_bishop_flight_2_gate).state != "-") ? 
                           id(billy_bishop_flight_2_gate).state : "2";
        std::string status2 = (id(billy_bishop_flight_2_status).has_state() && !id(billy_bishop_flight_2_status).state.empty() && id(billy_bishop_flight_2_status).state != "Unknown") ? 
                             id(billy_bishop_flight_2_status).state : "Delayed";
        display_flight(1, time2, flight2, origin2, gate2, status2);
        
        // Flight 3
        std::string time3 = (id(billy_bishop_flight_3_time).has_state() && !id(billy_bishop_flight_3_time).state.empty() && id(billy_bishop_flight_3_time).state != "--:--") ? 
                           id(billy_bishop_flight_3_time).state : "15:30";
        std::string flight3 = (id(billy_bishop_flight_3_flight_number).has_state() && !id(billy_bishop_flight_3_flight_number).state.empty() && id(billy_bishop_flight_3_flight_number).state != "Unknown") ? 
                             id(billy_bishop_flight_3_flight_number).state : "PD789";
        std::string origin3 = (id(billy_bishop_flight_3_origin).has_state() && !id(billy_bishop_flight_3_origin).state.empty() && id(billy_bishop_flight_3_origin).state != "Unknown") ? 
                             id(billy_bishop_flight_3_origin).state : "Boston";
        std::string gate3 = (id(billy_bishop_flight_3_gate).has_state() && !id(billy_bishop_flight_3_gate).state.empty() && id(billy_bishop_flight_3_gate).state != "Unknown" && id(billy_bishop_flight_3_gate).state != "-") ? 
                           id(billy_bishop_flight_3_gate).state : "3";
        std::string status3 = (id(billy_bishop_flight_3_status).has_state() && !id(billy_bishop_flight_3_status).state.empty() && id(billy_bishop_flight_3_status).state != "Unknown") ? 
                             id(billy_bishop_flight_3_status).state : "Arrived";
        display_flight(2, time3, flight3, origin3, gate3, status3);
        
        // Flight 4
        std::string time4 = (id(billy_bishop_flight_4_time).has_state() && !id(billy_bishop_flight_4_time).state.empty() && id(billy_bishop_flight_4_time).state != "--:--") ? 
                           id(billy_bishop_flight_4_time).state : "16:00";
        std::string flight4 = (id(billy_bishop_flight_4_flight_number).has_state() && !id(billy_bishop_flight_4_flight_number).state.empty() && id(billy_bishop_flight_4_flight_number).state != "Unknown") ? 
                             id(billy_bishop_flight_4_flight_number).state : "PD321";
        std::string origin4 = (id(billy_bishop_flight_4_origin).has_state() && !id(billy_bishop_flight_4_origin).state.empty() && id(billy_bishop_flight_4_origin).state != "Unknown") ? 
                             id(billy_bishop_flight_4_origin).state : "Quebec City";
        std::string gate4 = (id(billy_bishop_flight_4_gate).has_state() && !id(billy_bishop_flight_4_gate).state.empty() && id(billy_bishop_flight_4_gate).state != "Unknown" && id(billy_bishop_flight_4_gate).state != "-") ? 
                           id(billy_bishop_flight_4_gate).state : "1";
        std::string status4 = (id(billy_bishop_flight_4_status).has_state() && !id(billy_bishop_flight_4_status).state.empty() && id(billy_bishop_flight_4_status).state != "Unknown") ? 
                             id(billy_bishop_flight_4_status).state : "Boarding";
        display_flight(3, time4, flight4, origin4, gate4, status4);
        
        // Flight 5
        std::string time5 = (id(billy_bishop_flight_5_time).has_state() && !id(billy_bishop_flight_5_time).state.empty() && id(billy_bishop_flight_5_time).state != "--:--") ? 
                           id(billy_bishop_flight_5_time).state : "16:30";
        std::string flight5 = (id(billy_bishop_flight_5_flight_number).has_state() && !id(billy_bishop_flight_5_flight_number).state.empty() && id(billy_bishop_flight_5_flight_number).state != "Unknown") ? 
                             id(billy_bishop_flight_5_flight_number).state : "PD654";
        std::string origin5 = (id(billy_bishop_flight_5_origin).has_state() && !id(billy_bishop_flight_5_origin).state.empty() && id(billy_bishop_flight_5_origin).state != "Unknown") ? 
                             id(billy_bishop_flight_5_origin).state : "Newark";
        std::string gate5 = (id(billy_bishop_flight_5_gate).has_state() && !id(billy_bishop_flight_5_gate).state.empty() && id(billy_bishop_flight_5_gate).state != "Unknown" && id(billy_bishop_flight_5_gate).state != "-") ? 
                           id(billy_bishop_flight_5_gate).state : "2";
        std::string status5 = (id(billy_bishop_flight_5_status).has_state() && !id(billy_bishop_flight_5_status).state.empty() && id(billy_bishop_flight_5_status).state != "Unknown") ? 
                             id(billy_bishop_flight_5_status).state : "Late";
        display_flight(4, time5, flight5, origin5, gate5, status5);
      }
      
      // Enhanced footer with system info
      std::string footer_text = has_live_data ? "Live Flight Data" : "Demo Mode - No Live Data";
      it.printf(8, 225, id(small_font), id(text_gray), TextAlign::BOTTOM_LEFT, "%s", footer_text.c_str());
      
      // WiFi strength indicator
      if (id(wifi_strength).has_state()) {
        float wifi_db = id(wifi_strength).state;
        std::string wifi_icon = "📶";
        if (wifi_db > -50) wifi_icon = "📶"; // Excellent
        else if (wifi_db > -60) wifi_icon = "📶"; // Good  
        else if (wifi_db > -70) wifi_icon = "📡"; // Fair
        else wifi_icon = "📶"; // Weak
        it.printf(200, 225, id(small_font), id(text_gray), TextAlign::BOTTOM_LEFT, "WiFi: %.0fdBm", wifi_db);
      }
      
      it.printf(315, 225, id(small_font), id(canada_white), TextAlign::BOTTOM_RIGHT, "Touch to switch");
      
      // Add subtle border
      it.rectangle(0, 0, 320, 240, id(text_gray));

# ============================================================
# Touchscreen for Airport Switching (matching working train code)
# ============================================================
touchscreen:
  platform: xpt2046
  id: my_touchscreen
  spi_id: touch
  cs_pin: GPIO33
  interrupt_pin: GPIO36
  calibration:
    x_min: 250
    x_max: 3800
    y_min: 340
    y_max: 3860
  transform:
    swap_xy: true
  on_touch:
  - lambda: |-
      // Toggle between airports (0, 1)
      id(current_airport) = (id(current_airport) + 1) % 2;
      ESP_LOGD("airport_display", "Switched to airport: %d", id(current_airport));
      
      // Force display update immediately
      id(my_display).update();

# ============================================================
# Additional Features
# ============================================================

# Restart button via Home Assistant
button:
  - platform: restart
    name: "Restart Display"
    id: restart_display

# Template switch for display control
switch:
  - platform: template
    name: "Airport Display Power"
    id: display_power
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - light.turn_on: backlight
    turn_off_action:
      - light.turn_off: backlight

# Memory and performance monitoring
binary_sensor:
  - platform: status
    name: "Display Status"
    id: display_online
    
# Web server for diagnostics (optional - comment out if not needed)
web_server:
  port: 80
  include_internal: false