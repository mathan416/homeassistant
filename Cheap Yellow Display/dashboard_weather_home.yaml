esphome:
  name: "esphome-web-d6cc9c"
  friendly_name: CYD1

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable Home Assistant API
api:
  encryption:
    key: !secret esphome_encryption_key

logger:
  level: DEBUG
  
ota:
  - platform: esphome
    password: !secret esphome_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Cyd1 Fallback Hotspot"
    password: !secret wifi_fallback

# ============================================================
# Home Assistant Sensors
# ============================================================
sensor:
  # Indoor temperatures (Celsius)
  - platform: homeassistant
    id: hallway_temperature
    entity_id: sensor.hallway_temperature
    internal: true
  - platform: homeassistant
    id: dining_temperature
    entity_id: sensor.hue_motion_sensor_3_temperature
    internal: true
  - platform: homeassistant
    id: scott_temperature
    entity_id: sensor.hue_motion_sensor_2_temperature
    internal: true
  
  # Indoor temperatures (Fahrenheit - need conversion)
  - platform: homeassistant
    id: basement_temperature_f
    entity_id: sensor.basement_2_temperature
    internal: true
  - platform: homeassistant
    id: guest_temperature_f
    entity_id: sensor.hue_motion_sensor_1_temperature
    internal: true
  - platform: homeassistant
    id: iain_temperature_f
    entity_id: sensor.synthcave_motion_temperature
    internal: true
  
  # Outdoor weather (Fahrenheit - need conversion)
  - platform: homeassistant
    id: outside_temperature_f
    entity_id: sensor.bbq_sensor_temperature
    internal: true
  
  # Convert Fahrenheit to Celsius
  - platform: template
    id: basement_temperature
    lambda: |-
      if (id(basement_temperature_f).has_state()) {
        return (id(basement_temperature_f).state - 32.0) * 5.0 / 9.0;
      } else {
        return NAN;
      }
    update_interval: 5s
    internal: true
  
  - platform: template
    id: guest_temperature
    lambda: |-
      if (id(guest_temperature_f).has_state()) {
        return (id(guest_temperature_f).state - 32.0) * 5.0 / 9.0;
      } else {
        return NAN;
      }
    update_interval: 10s
    internal: true
  
  - platform: template
    id: iain_temperature
    lambda: |-
      if (id(iain_temperature_f).has_state()) {
        return (id(iain_temperature_f).state - 32.0) * 5.0 / 9.0;
      } else {
        return NAN;
      }
    update_interval: 10s
    internal: true
  
  # Convert outdoor temperature from Fahrenheit to Celsius
  - platform: template
    id: outside_temperature
    lambda: |-
      if (id(outside_temperature_f).has_state()) {
        return (id(outside_temperature_f).state - 32.0) * 5.0 / 9.0;
      } else {
        return NAN;
      }
    update_interval: 10s
    internal: true

# ============================================================
# Fonts - optimized sizes for multi-room display
# ============================================================
font:
  - file: 'gfonts://Roboto Condensed'
    id: header_font
    size: 16
    glyphs: "!\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz"
  - file: 'gfonts://Roboto Condensed'
    id: room_font
    size: 12
    glyphs: "!\"%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'"
  - file: 'gfonts://Roboto Mono'
    id: temp_font
    size: 14
    glyphs: "!\"%()+,-.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  - file: 'gfonts://Roboto'
    id: time_font
    size: 24
    glyphs: "!\":0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ -"

# ============================================================
# Display pages control
# ============================================================
globals:
  - id: current_page
    type: int
    initial_value: '0'
  - id: max_pages
    type: int
    initial_value: '2'

# ============================================================
# Colors
# ============================================================
color:
  - id: background
    hex: 1a1a1a
  - id: header_color
    hex: 4a9eff
  - id: temp_cold
    hex: 64b5f6      # Light blue for cold
  - id: temp_cool
    hex: 81c784      # Light green for cool
  - id: temp_warm
    hex: ffb74d      # Orange for warm
  - id: temp_hot
    hex: e57373      # Light red for hot
  - id: text_primary
    hex: ffffff
  - id: text_secondary
    hex: b0b0b0
  - id: outdoor_color
    hex: ffa726

# ============================================================
# Hardware setup
# ============================================================
light:
  - platform: monochromatic
    output: backlight_pwm
    name: Display Backlight
    id: backlight
    restore_mode: ALWAYS_ON

time:
  - platform: homeassistant
    id: esptime

spi:
  - id: tft
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  - id: touch
    clk_pin: GPIO25
    mosi_pin: GPIO32
    miso_pin: GPIO39

output:
  - platform: ledc
    pin: GPIO21
    id: backlight_pwm

# ============================================================
# Main Display Logic
# ============================================================
display:
  - platform: ili9xxx
    model: ILI9341
    spi_id: tft
    cs_pin: GPIO15
    dc_pin: GPIO2
    auto_clear_enabled: true
    invert_colors: true
    color_palette: 8BIT
    rotation: 0
    dimensions: 
      width: 320
      height: 240
    update_interval: 10s
    lambda: |-
      // Helper function to get temperature color
      auto get_temp_color = [](float temp) -> Color {
        if (temp < 18.0) return id(temp_cold);
        else if (temp < 21.0) return id(temp_cool);
        else if (temp < 24.0) return id(temp_warm);
        else return id(temp_hot);
      };
      
      // Clear background
      it.fill(id(background));
      
      if (id(current_page) == 0) {
        // ============================================================
        // PAGE 1: Main Rooms + Time/Weather
        // ============================================================
        
        // Header with time and outdoor temp
        it.strftime(10, 8, id(time_font), id(header_color), TextAlign::TOP_LEFT, "%H:%M", id(esptime).now());
        if (id(outside_temperature).has_state()) {
          it.printf(310, 8, id(header_font), id(outdoor_color), TextAlign::TOP_RIGHT, "Outside: %.1f°C", id(outside_temperature).state);
        }
        it.strftime(10, 32, id(room_font), id(text_secondary), TextAlign::TOP_LEFT, "%B %d", id(esptime).now());
        
        // Main rooms grid (2x2)
        int start_y = 55;
        int col_width = 160;
        int row_height = 45;
        
        // Row 1: Hallway and Scott's Office
        if (id(hallway_temperature).has_state()) {
          Color temp_color = get_temp_color(id(hallway_temperature).state);
          it.print(10, start_y, id(room_font), id(text_secondary), "Hallway");
          it.printf(10, start_y + 18, id(temp_font), temp_color, "%.1f°C", id(hallway_temperature).state);
        }
        
        if (id(scott_temperature).has_state()) {
          Color temp_color = get_temp_color(id(scott_temperature).state);
          it.print(170, start_y, id(room_font), id(text_secondary), "Scott's Office");
          it.printf(170, start_y + 18, id(temp_font), temp_color, "%.1f°C", id(scott_temperature).state);
        }
        
        // Row 2: Dining Room and Guest Room
        start_y += row_height;
        if (id(dining_temperature).has_state()) {
          Color temp_color = get_temp_color(id(dining_temperature).state);
          it.print(10, start_y, id(room_font), id(text_secondary), "Dining Room");
          it.printf(10, start_y + 18, id(temp_font), temp_color, "%.1f°C", id(dining_temperature).state);
        }
        
        if (id(guest_temperature).has_state()) {
          Color temp_color = get_temp_color(id(guest_temperature).state);
          it.print(170, start_y, id(room_font), id(text_secondary), "Guest Room");
          it.printf(170, start_y + 18, id(temp_font), temp_color, "%.1f°C", id(guest_temperature).state);
        }
        
        // Row 3: Basement and Iain's Office
        start_y += row_height;
        if (id(basement_temperature).has_state()) {
          Color temp_color = get_temp_color(id(basement_temperature).state);
          it.print(10, start_y, id(room_font), id(text_secondary), "Basement");
          it.printf(10, start_y + 18, id(temp_font), temp_color, "%.1f°C", id(basement_temperature).state);
        }
        
        if (id(iain_temperature).has_state()) {
          Color temp_color = get_temp_color(id(iain_temperature).state);
          it.print(170, start_y, id(room_font), id(text_secondary), "Iain's Office");
          it.printf(170, start_y + 18, id(temp_font), temp_color, "%.1f°C", id(iain_temperature).state);
        }
        
        // Page indicator
        it.print(160, 225, id(room_font), id(text_secondary), TextAlign::BOTTOM_CENTER, "Page 1 of 2 - Touch to switch");
        
      } else if (id(current_page) == 1) {
        // ============================================================
        // PAGE 2: Temperature Summary + Stats
        // ============================================================
        
        it.print(160, 15, id(header_font), id(header_color), TextAlign::TOP_CENTER, "Temperature Summary");
        
        // Calculate stats
        float min_temp = 50.0, max_temp = -50.0, avg_temp = 0.0;
        int temp_count = 0;
        
        // Collect all indoor temperatures
        float temps[] = {
          id(hallway_temperature).has_state() ? id(hallway_temperature).state : NAN,
          id(basement_temperature).has_state() ? id(basement_temperature).state : NAN,
          id(dining_temperature).has_state() ? id(dining_temperature).state : NAN,
          id(guest_temperature).has_state() ? id(guest_temperature).state : NAN,
          id(scott_temperature).has_state() ? id(scott_temperature).state : NAN,
          id(iain_temperature).has_state() ? id(iain_temperature).state : NAN
        };
        
        for (float temp : temps) {
          if (!isnan(temp)) {
            if (temp < min_temp) min_temp = temp;
            if (temp > max_temp) max_temp = temp;
            avg_temp += temp;
            temp_count++;
          }
        }
        
        if (temp_count > 0) {
          avg_temp /= temp_count;
          
          int y_pos = 50;
          it.printf(160, y_pos, id(room_font), id(text_primary), TextAlign::CENTER, "Indoor Average: %.1f°C", avg_temp);
          y_pos += 25;
          it.printf(160, y_pos, id(room_font), id(temp_cool), TextAlign::CENTER, "Coolest: %.1f°C", min_temp);
          y_pos += 20;
          it.printf(160, y_pos, id(room_font), id(temp_hot), TextAlign::CENTER, "Warmest: %.1f°C", max_temp);
          y_pos += 20;
          it.printf(160, y_pos, id(room_font), id(text_secondary), TextAlign::CENTER, "Range: %.1f°C", max_temp - min_temp);
          
          y_pos += 20;
          if (id(outside_temperature).has_state()) {
            float diff = avg_temp - id(outside_temperature).state;
            it.printf(160, y_pos, id(room_font), id(outdoor_color), TextAlign::CENTER, "Indoor vs Outdoor: %+.1f°C", diff);
          }
          
          // Current time display
          y_pos += 25;
          it.strftime(160, y_pos, id(header_font), id(header_color), TextAlign::CENTER, "%A, %B %d", id(esptime).now());
          it.strftime(160, y_pos + 20, id(time_font), id(text_primary), TextAlign::CENTER, "%H:%M:%S", id(esptime).now());
        }
        
        // Page indicator
        it.print(160, 225, id(room_font), id(text_secondary), TextAlign::BOTTOM_CENTER, "Page 2 of 2 - Touch to switch");
      }

touchscreen:
  platform: xpt2046
  id: my_touchscreen
  spi_id: touch
  cs_pin: GPIO33
  interrupt_pin: GPIO36
  calibration:
    x_min: 250
    x_max: 3800
    y_min: 340
    y_max: 3860
  transform:
    swap_xy: true
  on_touch:
  - lambda: |-
      // Cycle through pages
      id(current_page) = (id(current_page) + 1) % id(max_pages);